# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        # Recursion
        if not root:
            return 0
        return (1 + max(self.maxDepth(root.left), self.maxDepth(root.right)))

        # Iteration - BFS
        if not root:
            return 0
        queue = deque([(root,1)])
        res = 0

        while queue:
            node, level = queue.popleft ()
            if node:
                res = max (res, level)
                queue.append ((node.left, level + 1))
                queue.append ((node.right, level + 1))
        return res

# Používáme rekurzivní přístup pro prohledání stromu.
# Pokud je kořen prázdný, hloubka je 0.
# Rekurzivně počítáme hloubku levého a pravého podstromu a vracíme maximální hodnotu plus 1.
# Iterativní přístup (BFS):
# Vytvoříme frontu (queue), která uchovává uzly spolu s jejich hloubkou (level).
# Pro každý uzel ve frontě aktualizujeme maximální hloubku (res).
# Přidáváme levého a pravého potomka uzlu do fronty, spolu s úrovní, která je o 1 větší.
# Vracíme maximální hloubku stromu.
