# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        def helper (l,r):
            if l > r:
                return None
            mid = (l+r)//2
            root = TreeNode (nums[mid])
            root.left = helper (l, mid-1)
            root.right = helper (mid+1, r)
            return root
        return helper (0, len(nums)-1)

# Vytvoření pomocné rekurzivní funkce `helper` pro konstrukci stromu.
# Funkce bere jako argumenty levý a pravý index aktuálního podpole.
# Pokud levý index je větší než pravý, vracíme `None` (podmínka pro ukončení rekurze).
# Vypočítáme střední index a vytvoříme uzel stromu s hodnotou na tomto indexu.
# Rekurzivně voláme funkci pro levý podstrom (vlevo od středu) a pravý podstrom (vpravo od středu).
# Vracíme kořen stromu.
# Funkce `helper` je volána s celým rozsahem (od 0 do délky pole - 1) pro vytvoření celého stromu.
