# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        low,fast = head,head
        while fast and fast.next:
            low = low.next
            fast = fast.next.next
            if low == fast:
                return True
        return False

# Inicializujeme dva ukazatele (low a fast) na začátek seznamu.
# Smyčka pokračuje, dokud fast a jeho následující uzel nejsou prázdné.
# Posunujeme low o jeden uzel dopředu a fast o dva uzly dopředu.
# Pokud se ukazatele low a fast setkají, seznam obsahuje cyklus – vracíme True.
# Pokud se fast dostane na konec seznamu, seznam cyklus neobsahuje – vracíme False.
