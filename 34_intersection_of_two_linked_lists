# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        one,two = headA, headB
        while one != two:
            one = headB if one is None else one.next
            two = headA if two is None else two.next
        return one

# Inicializujeme dva ukazatele, jeden pro každý seznam (headA a headB).
# Dokud se ukazatele nerovnají (tj. neukazují na stejný uzel):
#   - Pokud první ukazatel dosáhne konce seznamu, přesměrujeme jej na začátek druhého seznamu, jinak pokračujeme na další uzel.
#   - Podobně, pokud druhý ukazatel dosáhne konce, přesměrujeme jej na začátek prvního seznamu, jinak pokračujeme na další uzel.
# Tato technika zajišťuje, že oba ukazatele projdou stejnou vzdálenost,
# což způsobí, že se setkají na průsečíku, pokud existuje, nebo na konci (None), pokud neexistuje.
# Vrátíme uzel, na kterém se ukazatele setkaly (průsečík nebo None).
